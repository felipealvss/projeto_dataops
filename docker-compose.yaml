
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.10.5
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 'YPvf-DK6w8EJM9W-qtLnklKkpZkp1FqC0-yYj7pCXRw='
    AIRFLOW__WEBSERVER__SECRET_KEY: 'YEfJgK1RXMbURpoonlSwpE62oLlLLxPTuiIlXqZiTI-5gIJxPnu5l79O0BD9_XzQaSRUzlwuf7aUgWhyIxk2Hw'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: pymongo psycopg2-binary
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-.}/src:/opt/airflow/src
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - dataops_net

services:
  postgres:
    image: postgres:13
    container_name: z111-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - dataops_net

  redis:
    image: redis:7.2-bookworm
    container_name: z111-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - dataops_net

  airflow-apiserver:
    <<: *airflow-common
    command: webserver
    container_name: z111-airflow-apiserver
    env_file:
      - .env
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: z111-airflow-scheduler
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    container_name: z111-airflow-dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: z111-airflow-worker
    env_file:
      - .env
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: z111-airflow-triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: z111-airflow-init
    command:
      - -c
      - |
        mkdir -p /opt/airflow/{logs,dags,plugins,config}
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        /entrypoint airflow db upgrade
        airflow users create --username airflow --password airflow --firstname Airflow --lastname Admin --role Admin --email airflow@example.com
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    container_name: z111-airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    container_name: z111-airflow-flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  fastapi:
    image: python:3.10.12
    container_name: z111-fastapi
    working_dir: /app
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/app
    ports:
      - "8000:8000"
    command: bash -c "pip install poetry && poetry install && PYTHONPATH=/app/src poetry run uvicorn fastapi_app.main:app --host 0.0.0.0 --port 8000 --reload"
    networks:
      - dataops_net
    depends_on:
      postgres:
        condition: service_healthy

  streamlit:
    image: python:3.10.12
    container_name: z111-streamlit
    working_dir: /app/src/streamlit_dashboard
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/app
    ports:
      - "8501:8501"
    command: >
      bash -c "
        cd /app &&
        pip install poetry &&
        poetry install &&
        cd /app/src/streamlit_dashboard &&
        poetry run streamlit run dashboard.py
      "
    networks:
      - dataops_net
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-db-volume:

networks:
  dataops_net:
    driver: bridge
